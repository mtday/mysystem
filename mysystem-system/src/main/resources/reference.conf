
akka {
  actor {
    provider = "akka.cluster.ClusterActorRefProvider"

    serializers {
      mysystem = "mysystem.common.serialization.ModelSerialization"
    }
    serialization-bindings {
      "mysystem.common.model.Model" = "mysystem"
    }
  }

  remote {
    log-remote-lifecycle-events = off
    netty.tcp {
      hostname = "127.0.0.1"
      port = 2551
    }
  }

  cluster {
    # The roles that the system node will have in the cluster.
    roles = [ "${project.version}", "system" ]
    seed-nodes = [
      "akka.tcp://mysystem@127.0.0.1:2551"
    ]

    auto-down-unreachable-after = 10s
    metrics.enabled = off
  }

  loggers = [ "akka.event.slf4j.Slf4jLogger" ]
  loglevel = "INFO"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
}


mysystem {
  actor.system.name = "mysystem"
  version = "${project.version}"

  database {
    driver.class = "com.mysql.jdbc.Driver"
    username = "mysystem"
    password = "mysystem"
    jdbc.url = "jdbc:mysql://localhost/mysystem?useSSL=false"

    actors {
      company {
        data-type = "COMPANY"
        max-failures = 5
        call-timeout = "10 s"
        reset-timeout = "60 s"

        actors {
          get-all {
            actor-class = "mysystem.db.actor.company.GetActor"
            message-class = "mysystem.db.model.GetAll"
          }
          get-by-id {
            actor-class = "mysystem.db.actor.company.GetActor"
            message-class = "mysystem.db.model.GetById"
          }
          add {
            actor-class = "mysystem.db.actor.company.AddActor"
            message-class = "mysystem.db.model.Add"
          }
        }
      }
    }
  }
}

